import lasagne
from lasagne import layers
from lasagne.updates import nesterov_momentum
from nolearn.lasagne import NeuralNet
import theano

def float32(k):
    return np.cast['float32'](k)

class AdjustVariable(object):
    def __init__(self, name, start=0.03, stop=0.001):
        self.name = name
        self.start, self.stop = start, stop
        self.ls = None

    def __call__(self, nn, train_history):
        if self.ls is None:
            self.ls = np.linspace(self.start, self.stop, nn.max_epochs)

        epoch = train_history[-1]['epoch']
        new_value = float32(self.ls[epoch - 1])
        getattr(nn, self.name).set_value(new_value)


net1 = NeuralNet(
    layers=[  # three layers: one hidden layer
        ('input', layers.InputLayer),
        ('hidden1', layers.DenseLayer),
        ('dropout1', layers.DropoutLayer),
        ('hidden2', layers.DenseLayer),
        ('dropout2', layers.DropoutLayer),
        #('hidden3', layers.DenseLayer),
        #('dropout3', layers.DropoutLayer),
        ('output', layers.DenseLayer),
        ],
    # layer parameters:
    input_shape=(None, 93),
    hidden1_num_units=200,
    dropout1_p=0.5,
    hidden2_num_units=200,
    dropout2_p=0.5,
    #hidden3_num_units=400,
    #dropout3_p=0.3,
#    dropout3_p=0.5,
#    hidden1_nonlinearity=lasagne.nonlinearities.sigmoid,
    output_nonlinearity=lasagne.nonlinearities.softmax,  # output layer uses identity function
    output_num_units=9,  # target values

    #update_learning_rate=0.01,
    #update_momentum=0.9,

    # optimization method:
    update=nesterov_momentum,
    update_learning_rate=theano.shared(float32(0.03)),
    update_momentum=theano.shared(float32(0.9)),
    on_epoch_finished=[
        AdjustVariable('update_learning_rate', start=0.03, stop=0.0001),
        AdjustVariable('update_momentum', start=0.9, stop=0.999),
        ],

    regression=False,  # flag to indicate we're dealing with classification problem
    max_epochs=200,  # we want to train this many epochs
    verbose=1,
    )

#print(data[0])
#print(type(labels))
#print(le.classes_)
net1.fit(np.array(X, dtype=np.float32), np.array(labels,dtype=np.int32))
